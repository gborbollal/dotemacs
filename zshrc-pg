eval "$(gimme 1.19.8)"
GOPATH="$HOME"/go
PATH=$GOPATH/bin:$PATH:$HOME/bin
export GOPATH PATH
eval "$(rbenv init - zsh)"

# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="robbyrussell"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
# zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git aws)

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi
export EDITOR='vim'

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

AWS_SDK_LOAD_CONFIG=1
export PATH="/usr/local/opt/kubernetes-cli@1.22/bin:$PATH"

# kcfg command - set the kubernetes config
kcfg() {
    if [[ -z "$1" ]]; then
        echo "Usage: kcfg CONFIG_FILE"
        echo
        echo "Sets the KUBECONFIG variable to the provided config file"
        return 1
    fi

    export KUBECONFIG="$HOME/.kube/${1/.config/}.config"
    echo "KUBECONFIG=$KUBECONFIG"
}

# starts a psql session for the given configuration
pconn() {
    if [[ -z "$1" ]]; then
        echo "Usage: pcfg CONFIG_FILE"
        echo
        echo "Sets the psql environment accordingly to CONFIG_FILE"
        return 1
    fi

		PSQL_CONFIG="$HOME/.psql/${1/.config/}.config"
		if  [ ! -f $PSQL_CONFIG ];then
				echo "The file $PSQL_CONFIG does not exist"
				echo
				return 1
		fi
		psql_user=$(grep PGUSER $PSQL_CONFIG | cut -d "=" -f 2)
		psql_db=$(grep PGDATABASE $PSQL_CONFIG | cut -d "=" -f 2)
		psql_host=$(grep PGHOST $PSQL_CONFIG | cut -d "=" -f 2)
		psql_port=$(grep PGPORT $PSQL_CONFIG | cut -d "=" -f 2)
		psql_schema=$(grep PGSCHEMA $PSQL_CONFIG | cut -d "=" -f 2)

		conn=''postgresql://$psql_host:$psql_port/$psql_db?options=-csearch_path%3D$psql_schema''
    psql -U $psql_user $conn
}

_kcfg() {
    if (( CURRENT == 2 )); then
        local -a configs
        configs=()
        local KUBEDIR="$HOME/.kube/"
        for i in ${KUBEDIR}*.config; do
            local CONFIGNAME="${i/$KUBEDIR/}"
            CONFIGNAME="${CONFIGNAME/.config/}"
            configs+=("$CONFIGNAME")
        done
        _describe 'configs' configs
    fi
}
compdef _kcfg kcfg

export PATH="/usr/local/opt/postgresql@13/bin:$PATH"
